function handleFirstTab(e){9===e.keyCode&&(document.body.classList.add("is-tabbing"),document.body.classList.remove("is-not-tabbing"),window.removeEventListener("keydown",handleFirstTab))}!function(e,t){"function"==typeof define&&define.amd?define("jquery-bridget/jquery-bridget",["jquery"],function(n){return t(e,n)}):"object"==typeof module&&module.exports?module.exports=t(e,require("jquery")):e.jQueryBridget=t(e,e.jQuery)}(window,function(e,t){"use strict";function n(n,o,a){function l(e,t,i){var r,o="$()."+n+'("'+t+'")';return e.each(function(e,l){var u=a.data(l,n);if(!u)return void s(n+" not initialized. Cannot call methods, i.e. "+o);var c=u[t];if(!c||"_"==t.charAt(0))return void s(o+" is not a valid method");var d=c.apply(u,i);r=void 0===r?d:r}),void 0!==r?r:e}function u(e,t){e.each(function(e,i){var r=a.data(i,n);r?(r.option(t),r._init()):(r=new o(i,t),a.data(i,n,r))})}a=a||t||e.jQuery,a&&(o.prototype.option||(o.prototype.option=function(e){a.isPlainObject(e)&&(this.options=a.extend(!0,this.options,e))}),a.fn[n]=function(e){if("string"==typeof e){var t=r.call(arguments,1);return l(this,e,t)}return u(this,e),this},i(a))}function i(e){!e||e&&e.bridget||(e.bridget=n)}var r=Array.prototype.slice,o=e.console,s="undefined"==typeof o?function(){}:function(e){o.error(e)};return i(t||e.jQuery),n}),function(e,t){"function"==typeof define&&define.amd?define("ev-emitter/ev-emitter",t):"object"==typeof module&&module.exports?module.exports=t():e.EvEmitter=t()}("undefined"!=typeof window?window:this,function(){function e(){}var t=e.prototype;return t.on=function(e,t){if(e&&t){var n=this._events=this._events||{},i=n[e]=n[e]||[];return i.indexOf(t)==-1&&i.push(t),this}},t.once=function(e,t){if(e&&t){this.on(e,t);var n=this._onceEvents=this._onceEvents||{},i=n[e]=n[e]||{};return i[t]=!0,this}},t.off=function(e,t){var n=this._events&&this._events[e];if(n&&n.length){var i=n.indexOf(t);return i!=-1&&n.splice(i,1),this}},t.emitEvent=function(e,t){var n=this._events&&this._events[e];if(n&&n.length){n=n.slice(0),t=t||[];for(var i=this._onceEvents&&this._onceEvents[e],r=0;r<n.length;r++){var o=n[r],s=i&&i[o];s&&(this.off(e,o),delete i[o]),o.apply(this,t)}return this}},t.allOff=function(){delete this._events,delete this._onceEvents},e}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("desandro-matches-selector/matches-selector",t):"object"==typeof module&&module.exports?module.exports=t():e.matchesSelector=t()}(window,function(){"use strict";var e=function(){var e=window.Element.prototype;if(e.matches)return"matches";if(e.matchesSelector)return"matchesSelector";for(var t=["webkit","moz","ms","o"],n=0;n<t.length;n++){var i=t[n],r=i+"MatchesSelector";if(e[r])return r}}();return function(t,n){return t[e](n)}}),function(e,t){"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["desandro-matches-selector/matches-selector"],function(n){return t(e,n)}):"object"==typeof module&&module.exports?module.exports=t(e,require("desandro-matches-selector")):e.fizzyUIUtils=t(e,e.matchesSelector)}(window,function(e,t){var n={};n.extend=function(e,t){for(var n in t)e[n]=t[n];return e},n.modulo=function(e,t){return(e%t+t)%t};var i=Array.prototype.slice;n.makeArray=function(e){if(Array.isArray(e))return e;if(null===e||void 0===e)return[];var t="object"==typeof e&&"number"==typeof e.length;return t?i.call(e):[e]},n.removeFrom=function(e,t){var n=e.indexOf(t);n!=-1&&e.splice(n,1)},n.getParent=function(e,n){for(;e.parentNode&&e!=document.body;)if(e=e.parentNode,t(e,n))return e},n.getQueryElement=function(e){return"string"==typeof e?document.querySelector(e):e},n.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},n.filterFindElements=function(e,i){e=n.makeArray(e);var r=[];return e.forEach(function(e){if(e instanceof HTMLElement){if(!i)return void r.push(e);t(e,i)&&r.push(e);for(var n=e.querySelectorAll(i),o=0;o<n.length;o++)r.push(n[o])}}),r},n.debounceMethod=function(e,t,n){n=n||100;var i=e.prototype[t],r=t+"Timeout";e.prototype[t]=function(){var e=this[r];clearTimeout(e);var t=arguments,o=this;this[r]=setTimeout(function(){i.apply(o,t),delete o[r]},n)}},n.docReady=function(e){var t=document.readyState;"complete"==t||"interactive"==t?setTimeout(e):document.addEventListener("DOMContentLoaded",e)},n.toDashed=function(e){return e.replace(/(.)([A-Z])/g,function(e,t,n){return t+"-"+n}).toLowerCase()};var r=e.console;return n.htmlInit=function(t,i){n.docReady(function(){var o=n.toDashed(i),s="data-"+o,a=document.querySelectorAll("["+s+"]"),l=document.querySelectorAll(".js-"+o),u=n.makeArray(a).concat(n.makeArray(l)),c=s+"-options",d=e.jQuery;u.forEach(function(e){var n,o=e.getAttribute(s)||e.getAttribute(c);try{n=o&&JSON.parse(o)}catch(a){return void(r&&r.error("Error parsing "+s+" on "+e.className+": "+a))}var l=new t(e,n);d&&d.data(e,i,l)})})},n}),function(e,t){"function"==typeof define&&define.amd?define("infinite-scroll/js/core",["ev-emitter/ev-emitter","fizzy-ui-utils/utils"],function(n,i){return t(e,n,i)}):"object"==typeof module&&module.exports?module.exports=t(e,require("ev-emitter"),require("fizzy-ui-utils")):e.InfiniteScroll=t(e,e.EvEmitter,e.fizzyUIUtils)}(window,function(e,t,n){function i(e,t){var s=n.getQueryElement(e);if(!s)return void console.error("Bad element for InfiniteScroll: "+(s||e));if(e=s,e.infiniteScrollGUID){var a=o[e.infiniteScrollGUID];return a.option(t),a}this.element=e,this.options=n.extend({},i.defaults),this.option(t),r&&(this.$element=r(this.element)),this.create()}var r=e.jQuery,o={};i.defaults={},i.create={},i.destroy={};var s=i.prototype;n.extend(s,t.prototype);var a=0;s.create=function(){var e=this.guid=++a;this.element.infiniteScrollGUID=e,o[e]=this,this.pageIndex=1,this.loadCount=0,this.updateGetPath();var t=this.getPath&&this.getPath();if(!t)return void console.error("Disabling InfiniteScroll");this.updateGetAbsolutePath(),this.log("initialized",[this.element.className]),this.callOnInit();for(var n in i.create)i.create[n].call(this)},s.option=function(e){n.extend(this.options,e)},s.callOnInit=function(){var e=this.options.onInit;e&&e.call(this,this)},s.dispatchEvent=function(e,t,n){this.log(e,n);var i=t?[t].concat(n):n;if(this.emitEvent(e,i),r&&this.$element){e+=".infiniteScroll";var o=e;if(t){var s=r.Event(t);s.type=e,o=s}this.$element.trigger(o,n)}};var l={initialized:function(e){return"on "+e},request:function(e){return"URL: "+e},load:function(e,t){return(e.title||"")+". URL: "+t},error:function(e,t){return e+". URL: "+t},append:function(e,t,n){return n.length+" items. URL: "+t},last:function(e,t){return"URL: "+t},history:function(e,t){return"URL: "+t},pageIndex:function(e,t){return"current page determined to be: "+e+" from "+t}};s.log=function(e,t){if(this.options.debug){var n="[InfiniteScroll] "+e,i=l[e];i&&(n+=". "+i.apply(this,t)),console.log(n)}},s.updateMeasurements=function(){this.windowHeight=e.innerHeight;var t=this.element.getBoundingClientRect();this.top=t.top+e.pageYOffset},s.updateScroller=function(){var t=this.options.elementScroll;if(!t)return void(this.scroller=e);if(this.scroller=t===!0?this.element:n.getQueryElement(t),!this.scroller)throw"Unable to find elementScroll: "+t},s.updateGetPath=function(){var e=this.options.path;if(!e)return void console.error("InfiniteScroll path option required. Set as: "+e);var t=typeof e;if("function"==t)return void(this.getPath=e);var n="string"==t&&e.match("{{#}}");return n?void this.updateGetPathTemplate(e):void this.updateGetPathSelector(e)},s.updateGetPathTemplate=function(e){this.getPath=function(){var t=this.pageIndex+1;return e.replace("{{#}}",t)}.bind(this);var t=e.replace(/(\\\?|\?)/,"\\?").replace("{{#}}","(\\d\\d?\\d?)"),n=new RegExp(t),i=location.href.match(n);i&&(this.pageIndex=parseInt(i[1],10),this.log("pageIndex",[this.pageIndex,"template string"]))};var u=[/^(.*?\/?page\/?)(\d\d?\d?)(.*?$)/,/^(.*?\/?\?page=)(\d\d?\d?)(.*?$)/,/(.*?)(\d\d?\d?)(?!.*\d)(.*?$)/];return s.updateGetPathSelector=function(e){var t=document.querySelector(e);if(!t)return void console.error("Bad InfiniteScroll path option. Next link not found: "+e);for(var n,i,r=t.getAttribute("href"),o=0;r&&o<u.length;o++){i=u[o];var s=r.match(i);if(s){n=s.slice(1);break}}return n?(this.isPathSelector=!0,this.getPath=function(){var e=this.pageIndex+1;return n[0]+e+n[2]}.bind(this),this.pageIndex=parseInt(n[1],10)-1,void this.log("pageIndex",[this.pageIndex,"next link"])):void console.error("InfiniteScroll unable to parse next link href: "+r)},s.updateGetAbsolutePath=function(){var e=this.getPath(),t=e.match(/^http/)||e.match(/^\//);if(t)return void(this.getAbsolutePath=this.getPath);var n=location.pathname,i=e.match(/^\?/);if(i)return void(this.getAbsolutePath=function(){return n+this.getPath()});var r=n.substring(0,n.lastIndexOf("/"));this.getAbsolutePath=function(){return r+"/"+this.getPath()}},i.create.hideNav=function(){var e=n.getQueryElement(this.options.hideNav);e&&(e.style.display="none",this.nav=e)},i.destroy.hideNav=function(){this.nav&&(this.nav.style.display="")},s.destroy=function(){this.allOff();for(var e in i.destroy)i.destroy[e].call(this);delete this.element.infiniteScrollGUID,delete o[this.guid],r&&this.$element&&r.removeData(this.element,"infiniteScroll")},i.throttle=function(e,t){t=t||200;var n,i;return function(){var r=+new Date,o=arguments,s=function(){n=r,e.apply(this,o)}.bind(this);n&&r<n+t?(clearTimeout(i),i=setTimeout(s,t)):s()}},i.data=function(e){e=n.getQueryElement(e);var t=e&&e.infiniteScrollGUID;return t&&o[t]},i.setJQuery=function(e){r=e},n.htmlInit(i,"infinite-scroll"),s._init=function(){},r&&r.bridget&&r.bridget("infiniteScroll",i),i}),function(e,t){"function"==typeof define&&define.amd?define("infinite-scroll/js/page-load",["./core"],function(n){return t(e,n)}):"object"==typeof module&&module.exports?module.exports=t(e,require("./core")):t(e,e.InfiniteScroll)}(window,function(e,t){function n(e){for(var t=document.createDocumentFragment(),n=0;e&&n<e.length;n++)t.appendChild(e[n]);return t}function i(e){for(var t=e.querySelectorAll("script"),n=0;n<t.length;n++){var i=t[n],o=document.createElement("script");r(i,o),o.innerHTML=i.innerHTML,i.parentNode.replaceChild(o,i)}}function r(e,t){for(var n=e.attributes,i=0;i<n.length;i++){var r=n[i];t.setAttribute(r.name,r.value)}}function o(e,t,n,i,r){var o=new XMLHttpRequest;o.open("GET",e,!0),o.responseType=t||"",o.setRequestHeader("X-Requested-With","XMLHttpRequest"),o.onload=function(){if(200==o.status)n(o.response);else if(204==o.status)r(o.response);else{var e=new Error(o.statusText);i(e)}},o.onerror=function(){var t=new Error("Network error requesting "+e);i(t)},o.send()}var s=t.prototype;return t.defaults.loadOnScroll=!0,t.defaults.checkLastPage=!0,t.defaults.responseType="document",t.create.pageLoad=function(){this.canLoad=!0,this.on("scrollThreshold",this.onScrollThresholdLoad),this.on("load",this.checkLastPage),this.options.outlayer&&this.on("append",this.onAppendOutlayer)},s.onScrollThresholdLoad=function(){this.options.loadOnScroll&&this.loadNextPage()},s.loadNextPage=function(){if(!this.isLoading&&this.canLoad){var e=this.getAbsolutePath();this.isLoading=!0;var t=function(t){this.onPageLoad(t,e)}.bind(this),n=function(t){this.onPageError(t,e)}.bind(this),i=function(t){this.lastPageReached(t,e)}.bind(this);o(e,this.options.responseType,t,n,i),this.dispatchEvent("request",null,[e])}},s.onPageLoad=function(e,t){return this.options.append||(this.isLoading=!1),this.pageIndex++,this.loadCount++,this.dispatchEvent("load",null,[e,t]),this.appendNextPage(e,t),e},s.appendNextPage=function(e,t){var i=this.options.append,r="document"==this.options.responseType;if(r&&i){var o=e.querySelectorAll(i),s=n(o),a=function(){this.appendItems(o,s),this.isLoading=!1,this.dispatchEvent("append",null,[e,t,o])}.bind(this);this.options.outlayer?this.appendOutlayerItems(s,a):a()}},s.appendItems=function(e,t){e&&e.length&&(t=t||n(e),i(t),this.element.appendChild(t))},s.appendOutlayerItems=function(n,i){var r=t.imagesLoaded||e.imagesLoaded;return r?void r(n,i):(console.error("[InfiniteScroll] imagesLoaded required for outlayer option"),void(this.isLoading=!1))},s.onAppendOutlayer=function(e,t,n){this.options.outlayer.appended(n)},s.checkLastPage=function(e,t){var n=this.options.checkLastPage;if(n){var i=this.options.path;if("function"==typeof i){var r=this.getPath();if(!r)return void this.lastPageReached(e,t)}var o;if("string"==typeof n?o=n:this.isPathSelector&&(o=i),o&&e.querySelector){var s=e.querySelector(o);s||this.lastPageReached(e,t)}}},s.lastPageReached=function(e,t){this.canLoad=!1,this.dispatchEvent("last",null,[e,t])},s.onPageError=function(e,t){return this.isLoading=!1,this.canLoad=!1,this.dispatchEvent("error",null,[e,t]),e},t.create.prefill=function(){if(this.options.prefill){var e=this.options.append;if(!e)return void console.error("append option required for prefill. Set as :"+e);this.updateMeasurements(),this.updateScroller(),this.isPrefilling=!0,this.on("append",this.prefill),this.once("error",this.stopPrefill),this.once("last",this.stopPrefill),this.prefill()}},s.prefill=function(){var e=this.getPrefillDistance();this.isPrefilling=e>=0,this.isPrefilling?(this.log("prefill"),this.loadNextPage()):this.stopPrefill()},s.getPrefillDistance=function(){return this.options.elementScroll?this.scroller.clientHeight-this.scroller.scrollHeight:this.windowHeight-this.element.clientHeight},s.stopPrefill=function(){this.log("stopPrefill"),this.off("append",this.prefill)},t}),function(e,t){"function"==typeof define&&define.amd?define("infinite-scroll/js/scroll-watch",["./core","fizzy-ui-utils/utils"],function(n,i){return t(e,n,i)}):"object"==typeof module&&module.exports?module.exports=t(e,require("./core"),require("fizzy-ui-utils")):t(e,e.InfiniteScroll,e.fizzyUIUtils)}(window,function(e,t,n){var i=t.prototype;return t.defaults.scrollThreshold=400,t.create.scrollWatch=function(){this.pageScrollHandler=this.onPageScroll.bind(this),this.resizeHandler=this.onResize.bind(this);var e=this.options.scrollThreshold,t=e||0===e;t&&this.enableScrollWatch()},t.destroy.scrollWatch=function(){this.disableScrollWatch()},i.enableScrollWatch=function(){this.isScrollWatching||(this.isScrollWatching=!0,this.updateMeasurements(),this.updateScroller(),this.on("last",this.disableScrollWatch),this.bindScrollWatchEvents(!0))},i.disableScrollWatch=function(){this.isScrollWatching&&(this.bindScrollWatchEvents(!1),delete this.isScrollWatching)},i.bindScrollWatchEvents=function(t){var n=t?"addEventListener":"removeEventListener";this.scroller[n]("scroll",this.pageScrollHandler),e[n]("resize",this.resizeHandler)},i.onPageScroll=t.throttle(function(){var e=this.getBottomDistance();e<=this.options.scrollThreshold&&this.dispatchEvent("scrollThreshold")}),i.getBottomDistance=function(){return this.options.elementScroll?this.getElementBottomDistance():this.getWindowBottomDistance()},i.getWindowBottomDistance=function(){var t=this.top+this.element.clientHeight,n=e.pageYOffset+this.windowHeight;return t-n},i.getElementBottomDistance=function(){var e=this.scroller.scrollHeight,t=this.scroller.scrollTop+this.scroller.clientHeight;return e-t},i.onResize=function(){this.updateMeasurements()},n.debounceMethod(t,"onResize",150),t}),function(e,t){"function"==typeof define&&define.amd?define("infinite-scroll/js/history",["./core","fizzy-ui-utils/utils"],function(n,i){return t(e,n,i)}):"object"==typeof module&&module.exports?module.exports=t(e,require("./core"),require("fizzy-ui-utils")):t(e,e.InfiniteScroll,e.fizzyUIUtils)}(window,function(e,t,n){var i=t.prototype;t.defaults.history="replace";var r=document.createElement("a");return t.create.history=function(){if(this.options.history){r.href=this.getAbsolutePath();var e=r.origin||r.protocol+"//"+r.host,t=e==location.origin;return t?void(this.options.append?this.createHistoryAppend():this.createHistoryPageLoad()):void console.error("[InfiniteScroll] cannot set history with different origin: "+r.origin+" on "+location.origin+" . History behavior disabled.")}},i.createHistoryAppend=function(){this.updateMeasurements(),this.updateScroller(),this.scrollPages=[{top:0,path:location.href,title:document.title}],this.scrollPageIndex=0,this.scrollHistoryHandler=this.onScrollHistory.bind(this),this.unloadHandler=this.onUnload.bind(this),this.scroller.addEventListener("scroll",this.scrollHistoryHandler),this.on("append",this.onAppendHistory),this.bindHistoryAppendEvents(!0)},i.bindHistoryAppendEvents=function(t){var n=t?"addEventListener":"removeEventListener";this.scroller[n]("scroll",this.scrollHistoryHandler),e[n]("unload",this.unloadHandler)},i.createHistoryPageLoad=function(){this.on("load",this.onPageLoadHistory)},t.destroy.history=i.destroyHistory=function(){var e=this.options.history&&this.options.append;e&&this.bindHistoryAppendEvents(!1)},i.onAppendHistory=function(e,t,n){if(n&&n.length){var i=n[0],o=this.getElementScrollY(i);r.href=t,this.scrollPages.push({top:o,path:r.href,title:e.title})}},i.getElementScrollY=function(e){return this.options.elementScroll?this.getElementElementScrollY(e):this.getElementWindowScrollY(e)},i.getElementWindowScrollY=function(t){var n=t.getBoundingClientRect();return n.top+e.pageYOffset},i.getElementElementScrollY=function(e){return e.offsetTop-this.top},i.onScrollHistory=function(){for(var e,t,n=this.getScrollViewY(),i=0;i<this.scrollPages.length;i++){var r=this.scrollPages[i];if(r.top>=n)break;e=i,t=r}e!=this.scrollPageIndex&&(this.scrollPageIndex=e,this.setHistory(t.title,t.path))},n.debounceMethod(t,"onScrollHistory",150),i.getScrollViewY=function(){return this.options.elementScroll?this.scroller.scrollTop+this.scroller.clientHeight/2:e.pageYOffset+this.windowHeight/2},i.setHistory=function(e,t){var n=this.options.history,i=n&&history[n+"State"];i&&(history[n+"State"](null,e,t),this.options.historyTitle&&(document.title=e),this.dispatchEvent("history",null,[e,t]))},i.onUnload=function(){var t=this.scrollPageIndex;if(0!==t){var n=this.scrollPages[t],i=e.pageYOffset-n.top+this.top;this.destroyHistory(),scrollTo(0,i)}},i.onPageLoadHistory=function(e,t){this.setHistory(e.title,t)},t}),function(e,t){"function"==typeof define&&define.amd?define("infinite-scroll/js/button",["./core","fizzy-ui-utils/utils"],function(n,i){return t(e,n,i)}):"object"==typeof module&&module.exports?module.exports=t(e,require("./core"),require("fizzy-ui-utils")):t(e,e.InfiniteScroll,e.fizzyUIUtils)}(window,function(e,t,n){function i(e,t){this.element=e,this.infScroll=t,this.clickHandler=this.onClick.bind(this),this.element.addEventListener("click",this.clickHandler),t.on("request",this.disable.bind(this)),t.on("load",this.enable.bind(this)),t.on("error",this.hide.bind(this)),t.on("last",this.hide.bind(this))}return t.create.button=function(){var e=n.getQueryElement(this.options.button);if(e)return void(this.button=new i(e,this))},t.destroy.button=function(){this.button&&this.button.destroy()},i.prototype.onClick=function(e){e.preventDefault(),this.infScroll.loadNextPage()},i.prototype.enable=function(){this.element.removeAttribute("disabled")},i.prototype.disable=function(){this.element.disabled="disabled"},i.prototype.hide=function(){this.element.style.display="none"},i.prototype.destroy=function(){this.element.removeEventListener("click",this.clickHandler)},t.Button=i,t}),function(e,t){"function"==typeof define&&define.amd?define("infinite-scroll/js/status",["./core","fizzy-ui-utils/utils"],function(n,i){return t(e,n,i)}):"object"==typeof module&&module.exports?module.exports=t(e,require("./core"),require("fizzy-ui-utils")):t(e,e.InfiniteScroll,e.fizzyUIUtils)}(window,function(e,t,n){function i(e){o(e,"none")}function r(e){o(e,"block")}function o(e,t){e&&(e.style.display=t)}var s=t.prototype;return t.create.status=function(){var e=n.getQueryElement(this.options.status);e&&(this.statusElement=e,this.statusEventElements={request:e.querySelector(".infinite-scroll-request"),error:e.querySelector(".infinite-scroll-error"),last:e.querySelector(".infinite-scroll-last")},this.on("request",this.showRequestStatus),this.on("error",this.showErrorStatus),this.on("last",this.showLastStatus),this.bindHideStatus("on"))},s.bindHideStatus=function(e){var t=this.options.append?"append":"load";this[e](t,this.hideAllStatus)},s.showRequestStatus=function(){this.showStatus("request")},s.showErrorStatus=function(){this.showStatus("error")},s.showLastStatus=function(){this.showStatus("last"),this.bindHideStatus("off")},s.showStatus=function(e){r(this.statusElement),this.hideStatusEventElements();var t=this.statusEventElements[e];r(t)},s.hideAllStatus=function(){i(this.statusElement),this.hideStatusEventElements()},s.hideStatusEventElements=function(){for(var e in this.statusEventElements){var t=this.statusEventElements[e];i(t)}},t}),function(e,t){"function"==typeof define&&define.amd?define(["infinite-scroll/js/core","infinite-scroll/js/page-load","infinite-scroll/js/scroll-watch","infinite-scroll/js/history","infinite-scroll/js/button","infinite-scroll/js/status"],t):"object"==typeof module&&module.exports&&(module.exports=t(require("./core"),require("./page-load"),require("./scroll-watch"),require("./history"),require("./button"),require("./status")))}(window,function(e){return e}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("imagesloaded/imagesloaded",["ev-emitter/ev-emitter"],function(n){return t(e,n)}):"object"==typeof module&&module.exports?module.exports=t(e,require("ev-emitter")):e.imagesLoaded=t(e,e.EvEmitter)}("undefined"!=typeof window?window:this,function(e,t){function n(e,t){for(var n in t)e[n]=t[n];return e}function i(e){if(Array.isArray(e))return e;var t="object"==typeof e&&"number"==typeof e.length;return t?u.call(e):[e]}function r(e,t,o){if(!(this instanceof r))return new r(e,t,o);var s=e;return"string"==typeof e&&(s=document.querySelectorAll(e)),s?(this.elements=i(s),this.options=n({},this.options),"function"==typeof t?o=t:n(this.options,t),o&&this.on("always",o),this.getImages(),a&&(this.jqDeferred=new a.Deferred),void setTimeout(this.check.bind(this))):void l.error("Bad element for imagesLoaded "+(s||e))}function o(e){this.img=e}function s(e,t){this.url=e,this.element=t,this.img=new Image}var a=e.jQuery,l=e.console,u=Array.prototype.slice;r.prototype=Object.create(t.prototype),r.prototype.options={},r.prototype.getImages=function(){this.images=[],this.elements.forEach(this.addElementImages,this)},r.prototype.addElementImages=function(e){"IMG"==e.nodeName&&this.addImage(e),this.options.background===!0&&this.addElementBackgroundImages(e);var t=e.nodeType;if(t&&c[t]){for(var n=e.querySelectorAll("img"),i=0;i<n.length;i++){var r=n[i];this.addImage(r)}if("string"==typeof this.options.background){var o=e.querySelectorAll(this.options.background);for(i=0;i<o.length;i++){var s=o[i];this.addElementBackgroundImages(s)}}}};var c={1:!0,9:!0,11:!0};return r.prototype.addElementBackgroundImages=function(e){var t=getComputedStyle(e);if(t)for(var n=/url\((['"])?(.*?)\1\)/gi,i=n.exec(t.backgroundImage);null!==i;){var r=i&&i[2];r&&this.addBackground(r,e),i=n.exec(t.backgroundImage)}},r.prototype.addImage=function(e){var t=new o(e);this.images.push(t)},r.prototype.addBackground=function(e,t){var n=new s(e,t);this.images.push(n)},r.prototype.check=function(){function e(e,n,i){setTimeout(function(){t.progress(e,n,i)})}var t=this;return this.progressedCount=0,this.hasAnyBroken=!1,this.images.length?void this.images.forEach(function(t){t.once("progress",e),t.check()}):void this.complete()},r.prototype.progress=function(e,t,n){this.progressedCount++,this.hasAnyBroken=this.hasAnyBroken||!e.isLoaded,this.emitEvent("progress",[this,e,t]),this.jqDeferred&&this.jqDeferred.notify&&this.jqDeferred.notify(this,e),this.progressedCount==this.images.length&&this.complete(),this.options.debug&&l&&l.log("progress: "+n,e,t)},r.prototype.complete=function(){var e=this.hasAnyBroken?"fail":"done";if(this.isComplete=!0,this.emitEvent(e,[this]),this.emitEvent("always",[this]),this.jqDeferred){var t=this.hasAnyBroken?"reject":"resolve";this.jqDeferred[t](this)}},o.prototype=Object.create(t.prototype),o.prototype.check=function(){var e=this.getIsImageComplete();return e?void this.confirm(0!==this.img.naturalWidth,"naturalWidth"):(this.proxyImage=new Image,this.proxyImage.addEventListener("load",this),this.proxyImage.addEventListener("error",this),this.img.addEventListener("load",this),this.img.addEventListener("error",this),void(this.proxyImage.src=this.img.src))},o.prototype.getIsImageComplete=function(){return this.img.complete&&this.img.naturalWidth},o.prototype.confirm=function(e,t){this.isLoaded=e,this.emitEvent("progress",[this,this.img,t])},o.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},o.prototype.onload=function(){this.confirm(!0,"onload"),this.unbindEvents()},o.prototype.onerror=function(){this.confirm(!1,"onerror"),this.unbindEvents()},o.prototype.unbindEvents=function(){this.proxyImage.removeEventListener("load",this),this.proxyImage.removeEventListener("error",this),this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},s.prototype=Object.create(o.prototype),s.prototype.check=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.img.src=this.url;var e=this.getIsImageComplete();e&&(this.confirm(0!==this.img.naturalWidth,"naturalWidth"),this.unbindEvents())},s.prototype.unbindEvents=function(){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},s.prototype.confirm=function(e,t){this.isLoaded=e,this.emitEvent("progress",[this,this.element,t])},r.makeJQueryPlugin=function(t){t=t||e.jQuery,t&&(a=t,a.fn.imagesLoaded=function(e,t){var n=new r(this,e,t);return n.jqDeferred.promise(a(this))})},r.makeJQueryPlugin(),r});var _self="undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},Prism=function(e){function t(e,t,n,i,r){this.type=e,this.content=t,this.alias=n,this.length=0|(i||"").length,this.greedy=!!r}var n=/\blang(?:uage)?-([\w-]+)\b/i,i=0,r={manual:e.Prism&&e.Prism.manual,disableWorkerMessageHandler:e.Prism&&e.Prism.disableWorkerMessageHandler,util:{encode:function(e){return e instanceof t?new t(e.type,r.util.encode(e.content),e.alias):Array.isArray(e)?e.map(r.util.encode):e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).slice(8,-1)},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++i}),e.__id},clone:function s(e,t){var n,i,o=r.util.type(e);switch(t=t||{},o){case"Object":if(i=r.util.objId(e),t[i])return t[i];n={},t[i]=n;for(var a in e)e.hasOwnProperty(a)&&(n[a]=s(e[a],t));return n;case"Array":return i=r.util.objId(e),t[i]?t[i]:(n=[],t[i]=n,e.forEach(function(e,i){n[i]=s(e,t)}),n);default:return e}}},languages:{extend:function(e,t){var n=r.util.clone(r.languages[e]);for(var i in t)n[i]=t[i];return n},insertBefore:function(e,t,n,i){i=i||r.languages;var o=i[e],s={};for(var a in o)if(o.hasOwnProperty(a)){if(a==t)for(var l in n)n.hasOwnProperty(l)&&(s[l]=n[l]);n.hasOwnProperty(a)||(s[a]=o[a])}var u=i[e];return i[e]=s,r.languages.DFS(r.languages,function(t,n){n===u&&t!=e&&(this[t]=s)}),s},DFS:function a(e,t,n,i){i=i||{};var o=r.util.objId;for(var s in e)if(e.hasOwnProperty(s)){t.call(e,s,e[s],n||s);var l=e[s],u=r.util.type(l);"Object"!==u||i[o(l)]?"Array"!==u||i[o(l)]||(i[o(l)]=!0,a(l,t,s,i)):(i[o(l)]=!0,a(l,t,null,i))}}},plugins:{},highlightAll:function(e,t){r.highlightAllUnder(document,e,t)},highlightAllUnder:function(e,t,n){var i={callback:n,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};r.hooks.run("before-highlightall",i);for(var o,s=i.elements||e.querySelectorAll(i.selector),a=0;o=s[a++];)r.highlightElement(o,t===!0,i.callback)},highlightElement:function(t,i,o){for(var s,a,l=t;l&&!n.test(l.className);)l=l.parentNode;l&&(s=(l.className.match(n)||[,""])[1].toLowerCase(),a=r.languages[s]),t.className=t.className.replace(n,"").replace(/\s+/g," ")+" language-"+s,t.parentNode&&(l=t.parentNode,/pre/i.test(l.nodeName)&&(l.className=l.className.replace(n,"").replace(/\s+/g," ")+" language-"+s));var u=t.textContent,c={element:t,language:s,grammar:a,code:u},d=function(e){c.highlightedCode=e,r.hooks.run("before-insert",c),c.element.innerHTML=c.highlightedCode,r.hooks.run("after-highlight",c),r.hooks.run("complete",c),o&&o.call(c.element)};if(r.hooks.run("before-sanity-check",c),!c.code)return void r.hooks.run("complete",c);if(r.hooks.run("before-highlight",c),!c.grammar)return void d(r.util.encode(c.code));if(i&&e.Worker){var h=new Worker(r.filename);h.onmessage=function(e){d(e.data)},h.postMessage(JSON.stringify({language:c.language,code:c.code,immediateClose:!0}))}else d(r.highlight(c.code,c.grammar,c.language))},highlight:function(e,n,i){var o={code:e,grammar:n,language:i};return r.hooks.run("before-tokenize",o),o.tokens=r.tokenize(o.code,o.grammar),r.hooks.run("after-tokenize",o),t.stringify(r.util.encode(o.tokens),o.language)},matchGrammar:function(e,n,i,o,s,a,l){for(var u in i)if(i.hasOwnProperty(u)&&i[u]){if(u==l)return;var c=i[u];c="Array"===r.util.type(c)?c:[c];for(var d=0;d<c.length;++d){var h=c[d],f=h.inside,p=!!h.lookbehind,g=!!h.greedy,m=0,v=h.alias;if(g&&!h.pattern.global){var y=h.pattern.toString().match(/[imuy]*$/)[0];h.pattern=RegExp(h.pattern.source,y+"g")}h=h.pattern||h;for(var b=o,w=s;b<n.length;w+=n[b].length,++b){var S=n[b];if(n.length>e.length)return;if(!(S instanceof t)){if(g&&b!=n.length-1){h.lastIndex=w;var E=h.exec(e);if(!E)break;for(var x=E.index+(p?E[1].length:0),P=E.index+E[0].length,A=b,k=w,F=n.length;A<F&&(k<P||!n[A].type&&!n[A-1].greedy);++A)k+=n[A].length,x>=k&&(++b,w=k);if(n[b]instanceof t)continue;L=A-b,S=e.slice(w,k),E.index-=w}else{h.lastIndex=0;var E=h.exec(S),L=1}if(E){p&&(m=E[1]?E[1].length:0);var x=E.index+m,E=E[0].slice(m),P=x+E.length,I=S.slice(0,x),j=S.slice(P),q=[b,L];I&&(++b,w+=I.length,q.push(I));var H=new t(u,f?r.tokenize(E,f):E,v,E,g);if(q.push(H),j&&q.push(j),Array.prototype.splice.apply(n,q),1!=L&&r.matchGrammar(e,n,i,b,w,!0,u),a)break}else if(a)break}}}}},tokenize:function(e,t){var n=[e],i=t.rest;if(i){for(var o in i)t[o]=i[o];delete t.rest}return r.matchGrammar(e,n,t,0,0,!1),n},hooks:{all:{},add:function(e,t){var n=r.hooks.all;n[e]=n[e]||[],n[e].push(t)},run:function(e,t){var n=r.hooks.all[e];if(n&&n.length)for(var i,o=0;i=n[o++];)i(t)}},Token:t};if(e.Prism=r,t.stringify=function(e,n,i){if("string"==typeof e)return e;if(Array.isArray(e))return e.map(function(i){return t.stringify(i,n,e)}).join("");var o={type:e.type,content:t.stringify(e.content,n,i),tag:"span",classes:["token",e.type],attributes:{},language:n,parent:i};if(e.alias){var s=Array.isArray(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(o.classes,s)}r.hooks.run("wrap",o);var a=Object.keys(o.attributes).map(function(e){return e+'="'+(o.attributes[e]||"").replace(/"/g,"&quot;")+'"'}).join(" ");return"<"+o.tag+' class="'+o.classes.join(" ")+'"'+(a?" "+a:"")+">"+o.content+"</"+o.tag+">"},!e.document)return e.addEventListener?(r.disableWorkerMessageHandler||e.addEventListener("message",function(t){var n=JSON.parse(t.data),i=n.language,o=n.code,s=n.immediateClose;e.postMessage(r.highlight(o,r.languages[i],i)),s&&e.close()},!1),r):r;var o=document.currentScript||[].slice.call(document.getElementsByTagName("script")).pop();return o&&(r.filename=o.src,r.manual||o.hasAttribute("data-manual")||("loading"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(r.highlightAll):window.setTimeout(r.highlightAll,16):document.addEventListener("DOMContentLoaded",r.highlightAll))),r}(_self);"undefined"!=typeof module&&module.exports&&(module.exports=Prism),"undefined"!=typeof global&&(global.Prism=Prism),Prism.languages.markup={comment:/<!--[\s\S]*?-->/,prolog:/<\?[\s\S]+?\?>/,doctype:/<!DOCTYPE[\s\S]+?>/i,cdata:/<!\[CDATA\[[\s\S]*?]]>/i,tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s\/>])))+)?\s*\/?>/i,
greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/i,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/i,inside:{punctuation:[/^=/,{pattern:/^(\s*)["']|["']$/,lookbehind:!0}]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:/&#?[\da-z]{1,8};/i},Prism.languages.markup.tag.inside["attr-value"].inside.entity=Prism.languages.markup.entity,Prism.hooks.add("wrap",function(e){"entity"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,"&"))}),Object.defineProperty(Prism.languages.markup.tag,"addInlined",{value:function(e,t){var n={};n["language-"+t]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:Prism.languages[t]},n.cdata=/^<!\[CDATA\[|\]\]>$/i;var i={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:n}};i["language-"+t]={pattern:/[\s\S]+/,inside:Prism.languages[t]};var r={};r[e]={pattern:RegExp(/(<__[\s\S]*?>)(?:<!\[CDATA\[[\s\S]*?\]\]>\s*|[\s\S])*?(?=<\/__>)/.source.replace(/__/g,e),"i"),lookbehind:!0,greedy:!0,inside:i},Prism.languages.insertBefore("markup","cdata",r)}}),Prism.languages.xml=Prism.languages.extend("markup",{}),Prism.languages.html=Prism.languages.markup,Prism.languages.mathml=Prism.languages.markup,Prism.languages.svg=Prism.languages.markup,function(e){var t=/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;e.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-]+?[\s\S]*?(?:;|(?=\s*\{))/i,inside:{rule:/@[\w-]+/}},url:RegExp("url\\((?:"+t.source+"|.*?)\\)","i"),selector:RegExp("[^{}\\s](?:[^{};\"']|"+t.source+")*?(?=\\s*\\{)"),string:{pattern:t,greedy:!0},property:/[-_a-z\xA0-\uFFFF][-\w\xA0-\uFFFF]*(?=\s*:)/i,important:/!important\b/i,"function":/[-a-z0-9]+(?=\()/i,punctuation:/[(){};:,]/},e.languages.css.atrule.inside.rest=e.languages.css;var n=e.languages.markup;n&&(n.tag.addInlined("style","css"),e.languages.insertBefore("inside","attr-value",{"style-attr":{pattern:/\s*style=("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/i,inside:{"attr-name":{pattern:/^\s*style/i,inside:n.tag.inside},punctuation:/^\s*=\s*['"]|['"]\s*$/,"attr-value":{pattern:/.+/i,inside:e.languages.css}},alias:"language-css"}},n.tag))}(Prism),Prism.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,"boolean":/\b(?:true|false)\b/,"function":/\w+(?=\()/,number:/\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,punctuation:/[{}[\];(),.:]/},Prism.languages.javascript=Prism.languages.extend("clike",{"class-name":[Prism.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])[_$A-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\.(?:prototype|constructor))/,lookbehind:!0}],keyword:[{pattern:/((?:^|})\s*)(?:catch|finally)\b/,lookbehind:!0},{pattern:/(^|[^.])\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],number:/\b(?:(?:0[xX][\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+)n?|\d+n|NaN|Infinity)\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee][+-]?\d+)?/,"function":/[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,operator:/-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/}),Prism.languages.javascript["class-name"][0].pattern=/(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/,Prism.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^\/\\\[\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})\]]))/,lookbehind:!0,greedy:!0},"function-variable":{pattern:/[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)?\s*\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\))/,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=>)/i,inside:Prism.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*=>)/,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*\s*)\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*\{)/,lookbehind:!0,inside:Prism.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),Prism.languages.insertBefore("javascript","string",{"template-string":{pattern:/`(?:\\[\s\S]|\${[^}]+}|[^\\`])*`/,greedy:!0,inside:{interpolation:{pattern:/\${[^}]+}/,inside:{"interpolation-punctuation":{pattern:/^\${|}$/,alias:"punctuation"},rest:Prism.languages.javascript}},string:/[\s\S]+/}}}),Prism.languages.markup&&Prism.languages.markup.tag.addInlined("script","javascript"),Prism.languages.js=Prism.languages.javascript,function(){"undefined"!=typeof self&&self.Prism&&self.document&&document.querySelector&&(self.Prism.fileHighlight=function(e){e=e||document;var t={js:"javascript",py:"python",rb:"ruby",ps1:"powershell",psm1:"powershell",sh:"bash",bat:"batch",h:"c",tex:"latex"};Array.prototype.slice.call(e.querySelectorAll("pre[data-src]")).forEach(function(e){if(!e.hasAttribute("data-src-loaded")){for(var n,i=e.getAttribute("data-src"),r=e,o=/\blang(?:uage)?-([\w-]+)\b/i;r&&!o.test(r.className);)r=r.parentNode;if(r&&(n=(e.className.match(o)||[,""])[1]),!n){var s=(i.match(/\.(\w+)$/)||[,""])[1];n=t[s]||s}var a=document.createElement("code");a.className="language-"+n,e.textContent="",a.textContent="Loading…",e.appendChild(a);var l=new XMLHttpRequest;l.open("GET",i,!0),l.onreadystatechange=function(){4==l.readyState&&(l.status<400&&l.responseText?(a.textContent=l.responseText,Prism.highlightElement(a),e.setAttribute("data-src-loaded","")):l.status>=400?a.textContent="✖ Error "+l.status+" while fetching file: "+l.statusText:a.textContent="✖ Error: File does not exist or is empty")},l.send(null)}}),Prism.plugins.toolbar&&Prism.plugins.toolbar.registerButton("download-file",function(e){var t=e.element.parentNode;if(t&&/pre/i.test(t.nodeName)&&t.hasAttribute("data-src")&&t.hasAttribute("data-download-link")){var n=t.getAttribute("data-src"),i=document.createElement("a");return i.textContent=t.getAttribute("data-download-link-label")||"Download",i.setAttribute("download",""),i.href=n,i}})},document.addEventListener("DOMContentLoaded",function(){self.Prism.fileHighlight()}))}();var infinite={init:function(){var e=document.querySelector(".js-next"),t=document.querySelector(".js-infinite-container");if(e&&t){var n=new InfiniteScroll(t,{path:".js-next a",append:".js-article",hideNav:".js-pagination"});n.on("append",function(e,t,n){n.forEach(function(e){var t=e.querySelectorAll("img"),n=e.querySelectorAll("audio"),i=e.querySelectorAll("video"),r=[t,n,i];r.forEach(function(e){e.forEach(function(e){e.outerHTML=e.outerHTML})})})});var i=document.querySelector(".js-infinite-loading"),r=document.querySelector(".js-infinite-end");return n.on("request",function(e){i.classList.add("show")}),n.on("last",function(e,t){i.classList.remove("show"),r.classList.add("show")}),n}}},menu={scroll:window.pageYOffset,height:0,init:function(){var e=this,t=document.querySelector(".js-header-details"),n=document.querySelector(".js-header-summary");if(t&&n){e.height=t.clientHeight-n.clientHeight,t.addEventListener("toggle",function(i){var r=i.target.getAttribute("open");null==r?e.close(n,t):e.open(n)});var i=document.querySelector(".js-close-menu");i&&i.addEventListener("click",function(i){i.preventDefault(),e.close(n,t)})}},close:function(e,t){var n=this;document.body.classList.remove("is-header-open"),t.removeAttribute("open"),e.setAttribute("aria-expanded","false"),window.scrollTo(0,n.scroll)},open:function(e){var t=this;t.scroll=window.pageYOffset,document.body.classList.add("is-header-open"),e.setAttribute("aria-expanded","true")}};window.addEventListener("keydown",handleFirstTab),"open"in document.createElement("details")||document.body.classList.add("no-details");var infScroll=infinite.init();menu.init();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
