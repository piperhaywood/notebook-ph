!function(e,t){"function"==typeof define&&define.amd?define("jquery-bridget/jquery-bridget",["jquery"],function(i){return t(e,i)}):"object"==typeof module&&module.exports?module.exports=t(e,require("jquery")):e.jQueryBridget=t(e,e.jQuery)}(window,function(e,t){"use strict";function i(i,o,a){function l(e,t,n){var r,o="$()."+i+'("'+t+'")';return e.each(function(e,l){var u=a.data(l,i);if(!u)return void s(i+" not initialized. Cannot call methods, i.e. "+o);var c=u[t];if(!c||"_"==t.charAt(0))return void s(o+" is not a valid method");var h=c.apply(u,n);r=void 0===r?h:r}),void 0!==r?r:e}function u(e,t){e.each(function(e,n){var r=a.data(n,i);r?(r.option(t),r._init()):(r=new o(n,t),a.data(n,i,r))})}a=a||t||e.jQuery,a&&(o.prototype.option||(o.prototype.option=function(e){a.isPlainObject(e)&&(this.options=a.extend(!0,this.options,e))}),a.fn[i]=function(e){if("string"==typeof e){var t=r.call(arguments,1);return l(this,e,t)}return u(this,e),this},n(a))}function n(e){!e||e&&e.bridget||(e.bridget=i)}var r=Array.prototype.slice,o=e.console,s="undefined"==typeof o?function(){}:function(e){o.error(e)};return n(t||e.jQuery),i}),function(e,t){"function"==typeof define&&define.amd?define("ev-emitter/ev-emitter",t):"object"==typeof module&&module.exports?module.exports=t():e.EvEmitter=t()}("undefined"!=typeof window?window:this,function(){function e(){}var t=e.prototype;return t.on=function(e,t){if(e&&t){var i=this._events=this._events||{},n=i[e]=i[e]||[];return n.indexOf(t)==-1&&n.push(t),this}},t.once=function(e,t){if(e&&t){this.on(e,t);var i=this._onceEvents=this._onceEvents||{},n=i[e]=i[e]||{};return n[t]=!0,this}},t.off=function(e,t){var i=this._events&&this._events[e];if(i&&i.length){var n=i.indexOf(t);return n!=-1&&i.splice(n,1),this}},t.emitEvent=function(e,t){var i=this._events&&this._events[e];if(i&&i.length){i=i.slice(0),t=t||[];for(var n=this._onceEvents&&this._onceEvents[e],r=0;r<i.length;r++){var o=i[r],s=n&&n[o];s&&(this.off(e,o),delete n[o]),o.apply(this,t)}return this}},t.allOff=function(){delete this._events,delete this._onceEvents},e}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("desandro-matches-selector/matches-selector",t):"object"==typeof module&&module.exports?module.exports=t():e.matchesSelector=t()}(window,function(){"use strict";var e=function(){var e=window.Element.prototype;if(e.matches)return"matches";if(e.matchesSelector)return"matchesSelector";for(var t=["webkit","moz","ms","o"],i=0;i<t.length;i++){var n=t[i],r=n+"MatchesSelector";if(e[r])return r}}();return function(t,i){return t[e](i)}}),function(e,t){"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["desandro-matches-selector/matches-selector"],function(i){return t(e,i)}):"object"==typeof module&&module.exports?module.exports=t(e,require("desandro-matches-selector")):e.fizzyUIUtils=t(e,e.matchesSelector)}(window,function(e,t){var i={};i.extend=function(e,t){for(var i in t)e[i]=t[i];return e},i.modulo=function(e,t){return(e%t+t)%t};var n=Array.prototype.slice;i.makeArray=function(e){if(Array.isArray(e))return e;if(null===e||void 0===e)return[];var t="object"==typeof e&&"number"==typeof e.length;return t?n.call(e):[e]},i.removeFrom=function(e,t){var i=e.indexOf(t);i!=-1&&e.splice(i,1)},i.getParent=function(e,i){for(;e.parentNode&&e!=document.body;)if(e=e.parentNode,t(e,i))return e},i.getQueryElement=function(e){return"string"==typeof e?document.querySelector(e):e},i.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},i.filterFindElements=function(e,n){e=i.makeArray(e);var r=[];return e.forEach(function(e){if(e instanceof HTMLElement){if(!n)return void r.push(e);t(e,n)&&r.push(e);for(var i=e.querySelectorAll(n),o=0;o<i.length;o++)r.push(i[o])}}),r},i.debounceMethod=function(e,t,i){i=i||100;var n=e.prototype[t],r=t+"Timeout";e.prototype[t]=function(){var e=this[r];clearTimeout(e);var t=arguments,o=this;this[r]=setTimeout(function(){n.apply(o,t),delete o[r]},i)}},i.docReady=function(e){var t=document.readyState;"complete"==t||"interactive"==t?setTimeout(e):document.addEventListener("DOMContentLoaded",e)},i.toDashed=function(e){return e.replace(/(.)([A-Z])/g,function(e,t,i){return t+"-"+i}).toLowerCase()};var r=e.console;return i.htmlInit=function(t,n){i.docReady(function(){var o=i.toDashed(n),s="data-"+o,a=document.querySelectorAll("["+s+"]"),l=document.querySelectorAll(".js-"+o),u=i.makeArray(a).concat(i.makeArray(l)),c=s+"-options",h=e.jQuery;u.forEach(function(e){var i,o=e.getAttribute(s)||e.getAttribute(c);try{i=o&&JSON.parse(o)}catch(a){return void(r&&r.error("Error parsing "+s+" on "+e.className+": "+a))}var l=new t(e,i);h&&h.data(e,n,l)})})},i}),function(e,t){"function"==typeof define&&define.amd?define("infinite-scroll/js/core",["ev-emitter/ev-emitter","fizzy-ui-utils/utils"],function(i,n){return t(e,i,n)}):"object"==typeof module&&module.exports?module.exports=t(e,require("ev-emitter"),require("fizzy-ui-utils")):e.InfiniteScroll=t(e,e.EvEmitter,e.fizzyUIUtils)}(window,function(e,t,i){function n(e,t){var s=i.getQueryElement(e);if(!s)return void console.error("Bad element for InfiniteScroll: "+(s||e));if(e=s,e.infiniteScrollGUID){var a=o[e.infiniteScrollGUID];return a.option(t),a}this.element=e,this.options=i.extend({},n.defaults),this.option(t),r&&(this.$element=r(this.element)),this.create()}var r=e.jQuery,o={};n.defaults={},n.create={},n.destroy={};var s=n.prototype;i.extend(s,t.prototype);var a=0;s.create=function(){var e=this.guid=++a;this.element.infiniteScrollGUID=e,o[e]=this,this.pageIndex=1,this.loadCount=0,this.updateGetPath();var t=this.getPath&&this.getPath();if(!t)return void console.error("Disabling InfiniteScroll");this.updateGetAbsolutePath(),this.log("initialized",[this.element.className]),this.callOnInit();for(var i in n.create)n.create[i].call(this)},s.option=function(e){i.extend(this.options,e)},s.callOnInit=function(){var e=this.options.onInit;e&&e.call(this,this)},s.dispatchEvent=function(e,t,i){this.log(e,i);var n=t?[t].concat(i):i;if(this.emitEvent(e,n),r&&this.$element){e+=".infiniteScroll";var o=e;if(t){var s=r.Event(t);s.type=e,o=s}this.$element.trigger(o,i)}};var l={initialized:function(e){return"on "+e},request:function(e){return"URL: "+e},load:function(e,t){return(e.title||"")+". URL: "+t},error:function(e,t){return e+". URL: "+t},append:function(e,t,i){return i.length+" items. URL: "+t},last:function(e,t){return"URL: "+t},history:function(e,t){return"URL: "+t},pageIndex:function(e,t){return"current page determined to be: "+e+" from "+t}};s.log=function(e,t){if(this.options.debug){var i="[InfiniteScroll] "+e,n=l[e];n&&(i+=". "+n.apply(this,t)),console.log(i)}},s.updateMeasurements=function(){this.windowHeight=e.innerHeight;var t=this.element.getBoundingClientRect();this.top=t.top+e.pageYOffset},s.updateScroller=function(){var t=this.options.elementScroll;if(!t)return void(this.scroller=e);if(this.scroller=t===!0?this.element:i.getQueryElement(t),!this.scroller)throw"Unable to find elementScroll: "+t},s.updateGetPath=function(){var e=this.options.path;if(!e)return void console.error("InfiniteScroll path option required. Set as: "+e);var t=typeof e;if("function"==t)return void(this.getPath=e);var i="string"==t&&e.match("{{#}}");return i?void this.updateGetPathTemplate(e):void this.updateGetPathSelector(e)},s.updateGetPathTemplate=function(e){this.getPath=function(){var t=this.pageIndex+1;return e.replace("{{#}}",t)}.bind(this);var t=e.replace("{{#}}","(\\d\\d?\\d?)"),i=new RegExp(t),n=location.href.match(i);n&&(this.pageIndex=parseInt(n[1],10),this.log("pageIndex",[this.pageIndex,"template string"]))};var u=[/^(.*?\/?page\/?)(\d\d?\d?)(.*?$)/,/^(.*?\/?\?page=)(\d\d?\d?)(.*?$)/,/(.*?)(\d\d?\d?)(?!.*\d)(.*?$)/];return s.updateGetPathSelector=function(e){var t=document.querySelector(e);if(!t)return void console.error("Bad InfiniteScroll path option. Next link not found: "+e);for(var i,n,r=t.getAttribute("href"),o=0;r&&o<u.length;o++){n=u[o];var s=r.match(n);if(s){i=s.slice(1);break}}return i?(this.isPathSelector=!0,this.getPath=function(){var e=this.pageIndex+1;return i[0]+e+i[2]}.bind(this),this.pageIndex=parseInt(i[1],10)-1,void this.log("pageIndex",[this.pageIndex,"next link"])):void console.error("InfiniteScroll unable to parse next link href: "+r)},s.updateGetAbsolutePath=function(){var e=this.getPath(),t=e.match(/^http/)||e.match(/^\//);if(t)return void(this.getAbsolutePath=this.getPath);var i=location.pathname,n=i.substring(0,i.lastIndexOf("/"));this.getAbsolutePath=function(){return n+"/"+this.getPath()}},n.create.hideNav=function(){var e=i.getQueryElement(this.options.hideNav);e&&(e.style.display="none",this.nav=e)},n.destroy.hideNav=function(){this.nav&&(this.nav.style.display="")},s.destroy=function(){this.allOff();for(var e in n.destroy)n.destroy[e].call(this);delete this.element.infiniteScrollGUID,delete o[this.guid],r&&this.$element&&r.removeData(this.element,"infiniteScroll")},n.throttle=function(e,t){t=t||200;var i,n;return function(){var r=+new Date,o=arguments,s=function(){i=r,e.apply(this,o)}.bind(this);i&&r<i+t?(clearTimeout(n),n=setTimeout(s,t)):s()}},n.data=function(e){e=i.getQueryElement(e);var t=e&&e.infiniteScrollGUID;return t&&o[t]},n.setJQuery=function(e){r=e},i.htmlInit(n,"infinite-scroll"),s._init=function(){},r&&r.bridget&&r.bridget("infiniteScroll",n),n}),function(e,t){"function"==typeof define&&define.amd?define("infinite-scroll/js/page-load",["./core"],function(i){return t(e,i)}):"object"==typeof module&&module.exports?module.exports=t(e,require("./core")):t(e,e.InfiniteScroll)}(window,function(e,t){function i(e){for(var t=document.createDocumentFragment(),i=0;e&&i<e.length;i++)t.appendChild(e[i]);return t}function n(e){for(var t=e.querySelectorAll("script"),i=0;i<t.length;i++){var n=t[i],o=document.createElement("script");r(n,o),o.innerHTML=n.innerHTML,n.parentNode.replaceChild(o,n)}}function r(e,t){for(var i=e.attributes,n=0;n<i.length;n++){var r=i[n];t.setAttribute(r.name,r.value)}}function o(e,t,i,n){var r=new XMLHttpRequest;r.open("GET",e,!0),r.responseType=t||"",r.setRequestHeader("X-Requested-With","XMLHttpRequest"),r.onload=function(){if(200==r.status)i(r.response);else{var e=new Error(r.statusText);n(e)}},r.onerror=function(){var t=new Error("Network error requesting "+e);n(t)},r.send()}var s=t.prototype;return t.defaults.loadOnScroll=!0,t.defaults.checkLastPage=!0,t.defaults.responseType="document",t.create.pageLoad=function(){this.canLoad=!0,this.on("scrollThreshold",this.onScrollThresholdLoad),this.on("load",this.checkLastPage),this.options.outlayer&&this.on("append",this.onAppendOutlayer)},s.onScrollThresholdLoad=function(){this.options.loadOnScroll&&this.loadNextPage()},s.loadNextPage=function(){if(!this.isLoading&&this.canLoad){var e=this.getAbsolutePath();this.isLoading=!0;var t=function(t){this.onPageLoad(t,e)}.bind(this),i=function(t){this.onPageError(t,e)}.bind(this);o(e,this.options.responseType,t,i),this.dispatchEvent("request",null,[e])}},s.onPageLoad=function(e,t){return this.options.append||(this.isLoading=!1),this.pageIndex++,this.loadCount++,this.dispatchEvent("load",null,[e,t]),this.appendNextPage(e,t),e},s.appendNextPage=function(e,t){var n=this.options.append,r="document"==this.options.responseType;if(r&&n){var o=e.querySelectorAll(n),s=i(o),a=function(){this.appendItems(o,s),this.isLoading=!1,this.dispatchEvent("append",null,[e,t,o])}.bind(this);this.options.outlayer?this.appendOutlayerItems(s,a):a()}},s.appendItems=function(e,t){e&&e.length&&(t=t||i(e),n(t),this.element.appendChild(t))},s.appendOutlayerItems=function(i,n){var r=t.imagesLoaded||e.imagesLoaded;return r?void r(i,n):(console.error("[InfiniteScroll] imagesLoaded required for outlayer option"),void(this.isLoading=!1))},s.onAppendOutlayer=function(e,t,i){this.options.outlayer.appended(i)},s.checkLastPage=function(e,t){var i=this.options.checkLastPage;if(i){var n=this.options.path;if("function"==typeof n){var r=this.getPath();if(!r)return void this.lastPageReached(e,t)}var o;if("string"==typeof i?o=i:this.isPathSelector&&(o=n),o&&e.querySelector){var s=e.querySelector(o);s||this.lastPageReached(e,t)}}},s.lastPageReached=function(e,t){this.canLoad=!1,this.dispatchEvent("last",null,[e,t])},s.onPageError=function(e,t){return this.isLoading=!1,this.canLoad=!1,this.dispatchEvent("error",null,[e,t]),e},t.create.prefill=function(){if(this.options.prefill){var e=this.options.append;if(!e)return void console.error("append option required for prefill. Set as :"+e);this.updateMeasurements(),this.updateScroller(),this.isPrefilling=!0,this.on("append",this.prefill),this.once("error",this.stopPrefill),this.once("last",this.stopPrefill),this.prefill()}},s.prefill=function(){var e=this.getPrefillDistance();this.isPrefilling=e>=0,this.isPrefilling?(this.log("prefill"),this.loadNextPage()):this.stopPrefill()},s.getPrefillDistance=function(){return this.options.elementScroll?this.scroller.clientHeight-this.scroller.scrollHeight:this.windowHeight-this.element.clientHeight},s.stopPrefill=function(){this.log("stopPrefill"),this.off("append",this.prefill)},t}),function(e,t){"function"==typeof define&&define.amd?define("infinite-scroll/js/scroll-watch",["./core","fizzy-ui-utils/utils"],function(i,n){return t(e,i,n)}):"object"==typeof module&&module.exports?module.exports=t(e,require("./core"),require("fizzy-ui-utils")):t(e,e.InfiniteScroll,e.fizzyUIUtils)}(window,function(e,t,i){var n=t.prototype;return t.defaults.scrollThreshold=400,t.create.scrollWatch=function(){this.pageScrollHandler=this.onPageScroll.bind(this),this.resizeHandler=this.onResize.bind(this);var e=this.options.scrollThreshold,t=e||0===e;t&&this.enableScrollWatch()},t.destroy.scrollWatch=function(){this.disableScrollWatch()},n.enableScrollWatch=function(){this.isScrollWatching||(this.isScrollWatching=!0,this.updateMeasurements(),this.updateScroller(),this.on("last",this.disableScrollWatch),this.bindScrollWatchEvents(!0))},n.disableScrollWatch=function(){this.isScrollWatching&&(this.bindScrollWatchEvents(!1),delete this.isScrollWatching)},n.bindScrollWatchEvents=function(t){var i=t?"addEventListener":"removeEventListener";this.scroller[i]("scroll",this.pageScrollHandler),e[i]("resize",this.resizeHandler)},n.onPageScroll=t.throttle(function(){var e=this.getBottomDistance();e<=this.options.scrollThreshold&&this.dispatchEvent("scrollThreshold")}),n.getBottomDistance=function(){return this.options.elementScroll?this.getElementBottomDistance():this.getWindowBottomDistance()},n.getWindowBottomDistance=function(){var t=this.top+this.element.clientHeight,i=e.pageYOffset+this.windowHeight;return t-i},n.getElementBottomDistance=function(){var e=this.scroller.scrollHeight,t=this.scroller.scrollTop+this.scroller.clientHeight;return e-t},n.onResize=function(){this.updateMeasurements()},i.debounceMethod(t,"onResize",150),t}),function(e,t){"function"==typeof define&&define.amd?define("infinite-scroll/js/history",["./core","fizzy-ui-utils/utils"],function(i,n){return t(e,i,n)}):"object"==typeof module&&module.exports?module.exports=t(e,require("./core"),require("fizzy-ui-utils")):t(e,e.InfiniteScroll,e.fizzyUIUtils)}(window,function(e,t,i){var n=t.prototype;t.defaults.history="replace";var r=document.createElement("a");return t.create.history=function(){if(this.options.history){r.href=this.getAbsolutePath();var e=r.origin||r.protocol+"//"+r.host,t=e==location.origin;return t?void(this.options.append?this.createHistoryAppend():this.createHistoryPageLoad()):void console.error("[InfiniteScroll] cannot set history with different origin: "+r.origin+" on "+location.origin+" . History behavior disabled.")}},n.createHistoryAppend=function(){this.updateMeasurements(),this.updateScroller(),this.scrollPages=[{top:0,path:location.href,title:document.title}],this.scrollPageIndex=0,this.scrollHistoryHandler=this.onScrollHistory.bind(this),this.unloadHandler=this.onUnload.bind(this),this.scroller.addEventListener("scroll",this.scrollHistoryHandler),this.on("append",this.onAppendHistory),this.bindHistoryAppendEvents(!0)},n.bindHistoryAppendEvents=function(t){var i=t?"addEventListener":"removeEventListener";this.scroller[i]("scroll",this.scrollHistoryHandler),e[i]("unload",this.unloadHandler)},n.createHistoryPageLoad=function(){this.on("load",this.onPageLoadHistory)},t.destroy.history=n.destroyHistory=function(){var e=this.options.history&&this.options.append;e&&this.bindHistoryAppendEvents(!1)},n.onAppendHistory=function(e,t,i){if(i&&i.length){var n=i[0],o=this.getElementScrollY(n);r.href=t,this.scrollPages.push({top:o,path:r.href,title:e.title})}},n.getElementScrollY=function(e){return this.options.elementScroll?this.getElementElementScrollY(e):this.getElementWindowScrollY(e)},n.getElementWindowScrollY=function(t){var i=t.getBoundingClientRect();return i.top+e.pageYOffset},n.getElementElementScrollY=function(e){return e.offsetTop-this.top},n.onScrollHistory=function(){for(var e,t,i=this.getScrollViewY(),n=0;n<this.scrollPages.length;n++){var r=this.scrollPages[n];if(r.top>=i)break;e=n,t=r}e!=this.scrollPageIndex&&(this.scrollPageIndex=e,this.setHistory(t.title,t.path))},i.debounceMethod(t,"onScrollHistory",150),n.getScrollViewY=function(){return this.options.elementScroll?this.scroller.scrollTop+this.scroller.clientHeight/2:e.pageYOffset+this.windowHeight/2},n.setHistory=function(e,t){var i=this.options.history,n=i&&history[i+"State"];n&&(history[i+"State"](null,e,t),this.options.historyTitle&&(document.title=e),this.dispatchEvent("history",null,[e,t]))},n.onUnload=function(){var t=this.scrollPageIndex;if(0!==t){var i=this.scrollPages[t],n=e.pageYOffset-i.top+this.top;this.destroyHistory(),scrollTo(0,n)}},n.onPageLoadHistory=function(e,t){this.setHistory(e.title,t)},t}),function(e,t){"function"==typeof define&&define.amd?define("infinite-scroll/js/button",["./core","fizzy-ui-utils/utils"],function(i,n){return t(e,i,n)}):"object"==typeof module&&module.exports?module.exports=t(e,require("./core"),require("fizzy-ui-utils")):t(e,e.InfiniteScroll,e.fizzyUIUtils)}(window,function(e,t,i){function n(e,t){this.element=e,this.infScroll=t,this.clickHandler=this.onClick.bind(this),this.element.addEventListener("click",this.clickHandler),t.on("request",this.disable.bind(this)),t.on("load",this.enable.bind(this)),t.on("error",this.hide.bind(this)),t.on("last",this.hide.bind(this))}return t.create.button=function(){var e=i.getQueryElement(this.options.button);if(e)return void(this.button=new n(e,this))},t.destroy.button=function(){this.button&&this.button.destroy()},n.prototype.onClick=function(e){e.preventDefault(),this.infScroll.loadNextPage()},n.prototype.enable=function(){this.element.removeAttribute("disabled")},n.prototype.disable=function(){this.element.disabled="disabled"},n.prototype.hide=function(){this.element.style.display="none"},n.prototype.destroy=function(){this.element.removeEventListener("click",this.clickHandler)},t.Button=n,t}),function(e,t){"function"==typeof define&&define.amd?define("infinite-scroll/js/status",["./core","fizzy-ui-utils/utils"],function(i,n){return t(e,i,n)}):"object"==typeof module&&module.exports?module.exports=t(e,require("./core"),require("fizzy-ui-utils")):t(e,e.InfiniteScroll,e.fizzyUIUtils)}(window,function(e,t,i){function n(e){o(e,"none")}function r(e){o(e,"block")}function o(e,t){e&&(e.style.display=t)}var s=t.prototype;return t.create.status=function(){var e=i.getQueryElement(this.options.status);e&&(this.statusElement=e,this.statusEventElements={request:e.querySelector(".infinite-scroll-request"),error:e.querySelector(".infinite-scroll-error"),last:e.querySelector(".infinite-scroll-last")},this.on("request",this.showRequestStatus),this.on("error",this.showErrorStatus),this.on("last",this.showLastStatus),this.bindHideStatus("on"))},s.bindHideStatus=function(e){var t=this.options.append?"append":"load";this[e](t,this.hideAllStatus)},s.showRequestStatus=function(){this.showStatus("request")},s.showErrorStatus=function(){this.showStatus("error")},s.showLastStatus=function(){this.showStatus("last"),this.bindHideStatus("off")},s.showStatus=function(e){r(this.statusElement),this.hideStatusEventElements();var t=this.statusEventElements[e];r(t)},s.hideAllStatus=function(){n(this.statusElement),this.hideStatusEventElements()},s.hideStatusEventElements=function(){for(var e in this.statusEventElements){var t=this.statusEventElements[e];n(t)}},t}),function(e,t){"function"==typeof define&&define.amd?define(["infinite-scroll/js/core","infinite-scroll/js/page-load","infinite-scroll/js/scroll-watch","infinite-scroll/js/history","infinite-scroll/js/button","infinite-scroll/js/status"],t):"object"==typeof module&&module.exports&&(module.exports=t(require("./core"),require("./page-load"),require("./scroll-watch"),require("./history"),require("./button"),require("./status")))}(window,function(e){return e}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("imagesloaded/imagesloaded",["ev-emitter/ev-emitter"],function(i){return t(e,i)}):"object"==typeof module&&module.exports?module.exports=t(e,require("ev-emitter")):e.imagesLoaded=t(e,e.EvEmitter)}("undefined"!=typeof window?window:this,function(e,t){function i(e,t){for(var i in t)e[i]=t[i];return e}function n(e){if(Array.isArray(e))return e;var t="object"==typeof e&&"number"==typeof e.length;return t?u.call(e):[e]}function r(e,t,o){if(!(this instanceof r))return new r(e,t,o);var s=e;return"string"==typeof e&&(s=document.querySelectorAll(e)),s?(this.elements=n(s),this.options=i({},this.options),"function"==typeof t?o=t:i(this.options,t),o&&this.on("always",o),this.getImages(),a&&(this.jqDeferred=new a.Deferred),void setTimeout(this.check.bind(this))):void l.error("Bad element for imagesLoaded "+(s||e))}function o(e){this.img=e}function s(e,t){this.url=e,this.element=t,this.img=new Image}var a=e.jQuery,l=e.console,u=Array.prototype.slice;r.prototype=Object.create(t.prototype),r.prototype.options={},r.prototype.getImages=function(){this.images=[],this.elements.forEach(this.addElementImages,this)},r.prototype.addElementImages=function(e){"IMG"==e.nodeName&&this.addImage(e),this.options.background===!0&&this.addElementBackgroundImages(e);var t=e.nodeType;if(t&&c[t]){for(var i=e.querySelectorAll("img"),n=0;n<i.length;n++){var r=i[n];this.addImage(r)}if("string"==typeof this.options.background){var o=e.querySelectorAll(this.options.background);for(n=0;n<o.length;n++){var s=o[n];this.addElementBackgroundImages(s)}}}};var c={1:!0,9:!0,11:!0};return r.prototype.addElementBackgroundImages=function(e){var t=getComputedStyle(e);if(t)for(var i=/url\((['"])?(.*?)\1\)/gi,n=i.exec(t.backgroundImage);null!==n;){var r=n&&n[2];r&&this.addBackground(r,e),n=i.exec(t.backgroundImage)}},r.prototype.addImage=function(e){var t=new o(e);this.images.push(t)},r.prototype.addBackground=function(e,t){var i=new s(e,t);this.images.push(i)},r.prototype.check=function(){function e(e,i,n){setTimeout(function(){t.progress(e,i,n)})}var t=this;return this.progressedCount=0,this.hasAnyBroken=!1,this.images.length?void this.images.forEach(function(t){t.once("progress",e),t.check()}):void this.complete()},r.prototype.progress=function(e,t,i){this.progressedCount++,this.hasAnyBroken=this.hasAnyBroken||!e.isLoaded,this.emitEvent("progress",[this,e,t]),this.jqDeferred&&this.jqDeferred.notify&&this.jqDeferred.notify(this,e),this.progressedCount==this.images.length&&this.complete(),this.options.debug&&l&&l.log("progress: "+i,e,t)},r.prototype.complete=function(){var e=this.hasAnyBroken?"fail":"done";if(this.isComplete=!0,this.emitEvent(e,[this]),this.emitEvent("always",[this]),this.jqDeferred){var t=this.hasAnyBroken?"reject":"resolve";this.jqDeferred[t](this)}},o.prototype=Object.create(t.prototype),o.prototype.check=function(){var e=this.getIsImageComplete();return e?void this.confirm(0!==this.img.naturalWidth,"naturalWidth"):(this.proxyImage=new Image,this.proxyImage.addEventListener("load",this),this.proxyImage.addEventListener("error",this),this.img.addEventListener("load",this),this.img.addEventListener("error",this),void(this.proxyImage.src=this.img.src))},o.prototype.getIsImageComplete=function(){return this.img.complete&&this.img.naturalWidth},o.prototype.confirm=function(e,t){this.isLoaded=e,this.emitEvent("progress",[this,this.img,t])},o.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},o.prototype.onload=function(){this.confirm(!0,"onload"),this.unbindEvents()},o.prototype.onerror=function(){this.confirm(!1,"onerror"),this.unbindEvents()},o.prototype.unbindEvents=function(){this.proxyImage.removeEventListener("load",this),this.proxyImage.removeEventListener("error",this),this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},s.prototype=Object.create(o.prototype),s.prototype.check=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.img.src=this.url;var e=this.getIsImageComplete();e&&(this.confirm(0!==this.img.naturalWidth,"naturalWidth"),this.unbindEvents())},s.prototype.unbindEvents=function(){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},s.prototype.confirm=function(e,t){this.isLoaded=e,this.emitEvent("progress",[this,this.element,t])},r.makeJQueryPlugin=function(t){t=t||e.jQuery,t&&(a=t,a.fn.imagesLoaded=function(e,t){var i=new r(this,e,t);return i.jqDeferred.promise(a(this))})},r.makeJQueryPlugin(),r});var _self="undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},Prism=function(){var e=/\blang(?:uage)?-([\w-]+)\b/i,t=0,i=_self.Prism={manual:_self.Prism&&_self.Prism.manual,disableWorkerMessageHandler:_self.Prism&&_self.Prism.disableWorkerMessageHandler,util:{encode:function(e){return e instanceof n?new n(e.type,i.util.encode(e.content),e.alias):"Array"===i.util.type(e)?e.map(i.util.encode):e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).match(/\[object (\w+)\]/)[1]},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++t}),e.__id},clone:function(e,t){var n=i.util.type(e);switch(t=t||{},n){case"Object":if(t[i.util.objId(e)])return t[i.util.objId(e)];var r={};t[i.util.objId(e)]=r;for(var o in e)e.hasOwnProperty(o)&&(r[o]=i.util.clone(e[o],t));return r;case"Array":if(t[i.util.objId(e)])return t[i.util.objId(e)];var r=[];return t[i.util.objId(e)]=r,e.forEach(function(e,n){r[n]=i.util.clone(e,t)}),r}return e}},languages:{extend:function(e,t){var n=i.util.clone(i.languages[e]);for(var r in t)n[r]=t[r];return n},insertBefore:function(e,t,n,r){r=r||i.languages;var o=r[e];if(2==arguments.length){n=arguments[1];for(var s in n)n.hasOwnProperty(s)&&(o[s]=n[s]);return o}var a={};for(var l in o)if(o.hasOwnProperty(l)){if(l==t)for(var s in n)n.hasOwnProperty(s)&&(a[s]=n[s]);a[l]=o[l]}return i.languages.DFS(i.languages,function(t,i){i===r[e]&&t!=e&&(this[t]=a)}),r[e]=a},DFS:function(e,t,n,r){r=r||{};for(var o in e)e.hasOwnProperty(o)&&(t.call(e,o,e[o],n||o),"Object"!==i.util.type(e[o])||r[i.util.objId(e[o])]?"Array"!==i.util.type(e[o])||r[i.util.objId(e[o])]||(r[i.util.objId(e[o])]=!0,i.languages.DFS(e[o],t,o,r)):(r[i.util.objId(e[o])]=!0,i.languages.DFS(e[o],t,null,r)))}},plugins:{},highlightAll:function(e,t){i.highlightAllUnder(document,e,t)},highlightAllUnder:function(e,t,n){var r={callback:n,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};i.hooks.run("before-highlightall",r);for(var o,s=r.elements||e.querySelectorAll(r.selector),a=0;o=s[a++];)i.highlightElement(o,t===!0,r.callback)},highlightElement:function(t,n,r){for(var o,s,a=t;a&&!e.test(a.className);)a=a.parentNode;a&&(o=(a.className.match(e)||[,""])[1].toLowerCase(),s=i.languages[o]),t.className=t.className.replace(e,"").replace(/\s+/g," ")+" language-"+o,t.parentNode&&(a=t.parentNode,/pre/i.test(a.nodeName)&&(a.className=a.className.replace(e,"").replace(/\s+/g," ")+" language-"+o));var l=t.textContent,u={element:t,language:o,grammar:s,code:l};if(i.hooks.run("before-sanity-check",u),!u.code||!u.grammar)return u.code&&(i.hooks.run("before-highlight",u),u.element.textContent=u.code,i.hooks.run("after-highlight",u)),void i.hooks.run("complete",u);if(i.hooks.run("before-highlight",u),n&&_self.Worker){var c=new Worker(i.filename);c.onmessage=function(e){u.highlightedCode=e.data,i.hooks.run("before-insert",u),u.element.innerHTML=u.highlightedCode,r&&r.call(u.element),i.hooks.run("after-highlight",u),i.hooks.run("complete",u)},c.postMessage(JSON.stringify({language:u.language,code:u.code,immediateClose:!0}))}else u.highlightedCode=i.highlight(u.code,u.grammar,u.language),i.hooks.run("before-insert",u),u.element.innerHTML=u.highlightedCode,r&&r.call(t),i.hooks.run("after-highlight",u),i.hooks.run("complete",u)},highlight:function(e,t,r){var o={code:e,grammar:t,language:r};return i.hooks.run("before-tokenize",o),o.tokens=i.tokenize(o.code,o.grammar),i.hooks.run("after-tokenize",o),n.stringify(i.util.encode(o.tokens),o.language)},matchGrammar:function(e,t,n,r,o,s,a){var l=i.Token;for(var u in n)if(n.hasOwnProperty(u)&&n[u]){if(u==a)return;var c=n[u];c="Array"===i.util.type(c)?c:[c];for(var h=0;h<c.length;++h){var d=c[h],f=d.inside,p=!!d.lookbehind,g=!!d.greedy,m=0,y=d.alias;if(g&&!d.pattern.global){var v=d.pattern.toString().match(/[imuy]*$/)[0];d.pattern=RegExp(d.pattern.source,v+"g")}d=d.pattern||d;for(var b=r,S=o;b<t.length;S+=t[b].length,++b){var w=t[b];if(t.length>e.length)return;if(!(w instanceof l)){if(g&&b!=t.length-1){d.lastIndex=S;var E=d.exec(e);if(!E)break;for(var P=E.index+(p?E[1].length:0),k=E.index+E[0].length,x=b,I=S,j=t.length;x<j&&(I<k||!t[x].type&&!t[x-1].greedy);++x)I+=t[x].length,P>=I&&(++b,S=I);if(t[b]instanceof l)continue;A=x-b,w=e.slice(S,I),E.index-=S}else{d.lastIndex=0;var E=d.exec(w),A=1}if(E){p&&(m=E[1]?E[1].length:0);var P=E.index+m,E=E[0].slice(m),k=P+E.length,L=w.slice(0,P),q=w.slice(k),H=[b,A];L&&(++b,S+=L.length,H.push(L));var z=new l(u,f?i.tokenize(E,f):E,y,E,g);if(H.push(z),q&&H.push(q),Array.prototype.splice.apply(t,H),1!=A&&i.matchGrammar(e,t,n,b,S,!0,u),s)break}else if(s)break}}}}},tokenize:function(e,t,n){var r=[e],o=t.rest;if(o){for(var s in o)t[s]=o[s];delete t.rest}return i.matchGrammar(e,r,t,0,0,!1),r},hooks:{all:{},add:function(e,t){var n=i.hooks.all;n[e]=n[e]||[],n[e].push(t)},run:function(e,t){var n=i.hooks.all[e];if(n&&n.length)for(var r,o=0;r=n[o++];)r(t)}}},n=i.Token=function(e,t,i,n,r){this.type=e,this.content=t,this.alias=i,this.length=0|(n||"").length,this.greedy=!!r};if(n.stringify=function(e,t,r){if("string"==typeof e)return e;if("Array"===i.util.type(e))return e.map(function(i){return n.stringify(i,t,e)}).join("");var o={type:e.type,content:n.stringify(e.content,t,r),tag:"span",classes:["token",e.type],attributes:{},language:t,parent:r};if(e.alias){var s="Array"===i.util.type(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(o.classes,s)}i.hooks.run("wrap",o);var a=Object.keys(o.attributes).map(function(e){return e+'="'+(o.attributes[e]||"").replace(/"/g,"&quot;")+'"'}).join(" ");return"<"+o.tag+' class="'+o.classes.join(" ")+'"'+(a?" "+a:"")+">"+o.content+"</"+o.tag+">"},!_self.document)return _self.addEventListener?(i.disableWorkerMessageHandler||_self.addEventListener("message",function(e){var t=JSON.parse(e.data),n=t.language,r=t.code,o=t.immediateClose;_self.postMessage(i.highlight(r,i.languages[n],n)),o&&_self.close()},!1),_self.Prism):_self.Prism;var r=document.currentScript||[].slice.call(document.getElementsByTagName("script")).pop();return r&&(i.filename=r.src,i.manual||r.hasAttribute("data-manual")||("loading"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(i.highlightAll):window.setTimeout(i.highlightAll,16):document.addEventListener("DOMContentLoaded",i.highlightAll))),_self.Prism}();"undefined"!=typeof module&&module.exports&&(module.exports=Prism),"undefined"!=typeof global&&(global.Prism=Prism),Prism.languages.markup={comment:/<!--[\s\S]*?-->/,prolog:/<\?[\s\S]+?\?>/,
doctype:/<!DOCTYPE[\s\S]+?>/i,cdata:/<!\[CDATA\[[\s\S]*?]]>/i,tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/i,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/i,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"attr-value":{pattern:/=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+)/i,inside:{punctuation:[/^=/,{pattern:/(^|[^\\])["']/,lookbehind:!0}]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:/&#?[\da-z]{1,8};/i},Prism.languages.markup.tag.inside["attr-value"].inside.entity=Prism.languages.markup.entity,Prism.hooks.add("wrap",function(e){"entity"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,"&"))}),Prism.languages.xml=Prism.languages.markup,Prism.languages.html=Prism.languages.markup,Prism.languages.mathml=Prism.languages.markup,Prism.languages.svg=Prism.languages.markup,Prism.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-]+?.*?(?:;|(?=\s*\{))/i,inside:{rule:/@[\w-]+/}},url:/url\((?:(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1|.*?)\)/i,selector:/[^{}\s][^{};]*?(?=\s*\{)/,string:{pattern:/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},property:/[-_a-z\xA0-\uFFFF][-\w\xA0-\uFFFF]*(?=\s*:)/i,important:/\B!important\b/i,"function":/[-a-z0-9]+(?=\()/i,punctuation:/[(){};:]/},Prism.languages.css.atrule.inside.rest=Prism.languages.css,Prism.languages.markup&&(Prism.languages.insertBefore("markup","tag",{style:{pattern:/(<style[\s\S]*?>)[\s\S]*?(?=<\/style>)/i,lookbehind:!0,inside:Prism.languages.css,alias:"language-css",greedy:!0}}),Prism.languages.insertBefore("inside","attr-value",{"style-attr":{pattern:/\s*style=("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/i,inside:{"attr-name":{pattern:/^\s*style/i,inside:Prism.languages.markup.tag.inside},punctuation:/^\s*=\s*['"]|['"]\s*$/,"attr-value":{pattern:/.+/i,inside:Prism.languages.css}},alias:"language-css"}},Prism.languages.markup.tag)),Prism.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,"boolean":/\b(?:true|false)\b/,"function":/[a-z0-9_]+(?=\()/i,number:/\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,punctuation:/[{}[\];(),.:]/},Prism.languages.javascript=Prism.languages.extend("clike",{keyword:/\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/,number:/\b(?:0[xX][\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+|NaN|Infinity)\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee][+-]?\d+)?/,"function":/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*\()/i,operator:/-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/}),Prism.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(\[[^\]\r\n]+]|\\.|[^\/\\\[\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})\]]))/,lookbehind:!0,greedy:!0},"function-variable":{pattern:/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=\s*(?:function\b|(?:\([^()]*\)|[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/i,alias:"function"},constant:/\b[A-Z][A-Z\d_]*\b/}),Prism.languages.insertBefore("javascript","string",{"template-string":{pattern:/`(?:\\[\s\S]|\${[^}]+}|[^\\`])*`/,greedy:!0,inside:{interpolation:{pattern:/\${[^}]+}/,inside:{"interpolation-punctuation":{pattern:/^\${|}$/,alias:"punctuation"},rest:null}},string:/[\s\S]+/}}}),Prism.languages.javascript["template-string"].inside.interpolation.inside.rest=Prism.languages.javascript,Prism.languages.markup&&Prism.languages.insertBefore("markup","tag",{script:{pattern:/(<script[\s\S]*?>)[\s\S]*?(?=<\/script>)/i,lookbehind:!0,inside:Prism.languages.javascript,alias:"language-javascript",greedy:!0}}),Prism.languages.js=Prism.languages.javascript,function(){"undefined"!=typeof self&&self.Prism&&self.document&&document.querySelector&&(self.Prism.fileHighlight=function(){var e={js:"javascript",py:"python",rb:"ruby",ps1:"powershell",psm1:"powershell",sh:"bash",bat:"batch",h:"c",tex:"latex"};Array.prototype.slice.call(document.querySelectorAll("pre[data-src]")).forEach(function(t){for(var i,n=t.getAttribute("data-src"),r=t,o=/\blang(?:uage)?-([\w-]+)\b/i;r&&!o.test(r.className);)r=r.parentNode;if(r&&(i=(t.className.match(o)||[,""])[1]),!i){var s=(n.match(/\.(\w+)$/)||[,""])[1];i=e[s]||s}var a=document.createElement("code");a.className="language-"+i,t.textContent="",a.textContent="Loading…",t.appendChild(a);var l=new XMLHttpRequest;l.open("GET",n,!0),l.onreadystatechange=function(){4==l.readyState&&(l.status<400&&l.responseText?(a.textContent=l.responseText,Prism.highlightElement(a)):l.status>=400?a.textContent="✖ Error "+l.status+" while fetching file: "+l.statusText:a.textContent="✖ Error: File does not exist or is empty")},l.send(null)}),Prism.plugins.toolbar&&Prism.plugins.toolbar.registerButton("download-file",function(e){var t=e.element.parentNode;if(t&&/pre/i.test(t.nodeName)&&t.hasAttribute("data-src")&&t.hasAttribute("data-download-link")){var i=t.getAttribute("data-src"),n=document.createElement("a");return n.textContent=t.getAttribute("data-download-link-label")||"Download",n.setAttribute("download",""),n.href=i,n}})},document.addEventListener("DOMContentLoaded",self.Prism.fileHighlight))}(),function(e){function t(e){9===e.keyCode&&(document.body.classList.add("user-is-tabbing"),window.removeEventListener("keydown",t))}if($next=e(".js-next"),$next.length){var i=e(".js-infinite-container");i.infiniteScroll({path:".js-next a",append:".js-article",hideNav:".js-pagination",elementScroll:".js-wrapper"}),i.on("append.infiniteScroll",function(t,i,n,r){e(r).find("img").each(function(e,t){t.outerHTML=t.outerHTML})}),i.on("request.infiniteScroll",function(t,i){e(".js-infinite-loading").addClass("show")}),i.on("last.infiniteScroll",function(t,i,n){e(".js-infinite-loading").removeClass("show"),e(".js-infinite-end").addClass("show")})}window.addEventListener("keydown",t)}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
